;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name sponge.emulator, :imports {StringBuffer goog.string.StringBuffer}, :requires {StringBuffer goog.string.StringBuffer, string clojure.string, clojure.string clojure.string, cljs.reader cljs.reader}, :uses nil, :defs {screen-text {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 78, :column 7, :end-line 78, :end-column 18, :arglists (quote ([ctx]))}, :name sponge.emulator/screen-text, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 18, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, slurp {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 99, :column 7, :end-line 99, :end-column 12, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name sponge.emulator/slurp, :variadic true, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, parse-string {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 58, :column 7, :end-line 58, :end-column 19, :arglists (quote ([s]))}, :name sponge.emulator/parse-string, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, step {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 68, :column 7, :end-line 68, :end-column 11, :arglists (quote ([ctx]))}, :name sponge.emulator/step, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 11, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, run {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 73, :column 7, :end-line 73, :end-column 10, :arglists (quote ([ctx]))}, :name sponge.emulator/run, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 10, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, printable {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 115, :column 7, :end-line 115, :end-column 16, :arglists (quote ([program]))}, :name sponge.emulator/printable, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 16, :method-params ([program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([program]))}, binop {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([op]))}, :name sponge.emulator/binop, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :method-params ([op]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([op]))}, print-state {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 92, :column 7, :end-line 92, :end-column 18, :arglists (quote ([ctx]))}, :name sponge.emulator/print-state, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 18, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, parse-syntax {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 61, :column 7, :end-line 61, :end-column 19, :arglists (quote ([s]))}, :name sponge.emulator/parse-syntax, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, intcast {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 9, :column 7, :end-line 9, :end-column 14, :arglists (quote ([v]))}, :name sponge.emulator/intcast, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 14, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, print-*ip {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 88, :column 7, :end-line 88, :end-column 16, :arglists (quote ([ctx]))}, :name sponge.emulator/print-*ip, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 16, :method-params ([ctx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ctx]))}, template {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 102, :column 7, :end-line 102, :end-column 15, :arglists (quote ([named]))}, :name sponge.emulator/template, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 15, :method-params ([named]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([named]))}, instr->svg {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([[op & args]]))}, :name sponge.emulator/instr->svg, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 17, :method-params ([p__33061]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[op & args]]))}, ops {:name sponge.emulator/ops, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 22, :column 1, :end-line 22, :end-column 9, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 22, :column 6, :end-line 22, :end-column 9}}, parse {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 52, :column 7, :end-line 52, :end-column 12, :arglists (quote ([src]))}, :name sponge.emulator/parse, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 12, :method-params ([src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([src]))}, get-cell {:protocol-inline nil, :meta {:file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :line 6, :column 7, :end-line 6, :end-column 15, :arglists (quote ([ctx x]))}, :name sponge.emulator/get-cell, :variadic false, :file "/Users/nasser/Projects/sponge/src/cljs/sponge/emulator.cljs", :end-column 15, :method-params ([ctx x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ctx x]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:plot :* :copy :ip :else :> :- :state :+ :รท :set :< :jump :instr}, :order [:state :else :ip :plot :* :copy :> :- :+ :รท :set :< :jump :instr]}, :doc nil}